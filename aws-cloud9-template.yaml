AWSTemplateFormatVersion: "2010-09-09"
Description: A template to provision an AWS Cloud9 IDE on demand.

Parameters:
  EC2InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
  EC2ImageId:
    Description: EC2 ImageId
    Type: String
    Default: amazonlinux-2-x86_64
    AllowedValues:
      - amazonlinux-1-x86_64
      - amazonlinux-2-x86_64
      - ubuntu-18.04-x86_64

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-08e4e35cccc6189f4
    us-east-2:
      AMI: ami-001089eb624938d9f

#Conditions:


########################################################################################################################
Resources:
  # c9 env
  Cloud9Environment:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: A dynamically created Cloud9 IDE based on user specifications.
      # see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloud9-environmentec2.html for limitations.
      ImageId: !Ref EC2ImageId
      InstanceType: !Ref EC2InstanceType
      # see https://github.com/aws-samples/aws-cloud9-bootstrapping-example/blob/main/example_instancestack.yaml
      # for an example of how to handle this for 3rd parties.
#      OwnerArn: "parameter"

      #"from-vpn? or instance? or parameter"
      # I think that there is a way to have the paramter list all avail subnets and the user selects
      SubnetId: subnet-004fa2f34afb3d717
      Tags:
        - Key: Cloud9-Name
          Value: !Sub '${AWS::StackName}-${AWS::Region}-Cloud9'

# most of the values for the instance should come from the parameters
  Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref EC2InstanceType
      # I should create another env and decode their user data to see what they had
#      UserData: >-
#        (removed.  obsfucates)
#      Tags:
#        - Key: Name
#          Value: aws-cloud9-basic-env-95ee1794b3d14224ab40ab4de8ec5db6
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: subnet-004fa2f34afb3d717
          GroupSet:
            - !Ref InstanceSecurityGroup
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Security group for AWS Cloud9 environment
        aws-cloud9-basic-env-95ee1794b3d14224ab40ab4de8ec5db6
      # The use should be allowed to choose from a list?
      # or should I just default to the default vpc?
      VpcId: vpc-04316aea239fff926
      SecurityGroupIngress:
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          # I'm not sure if this is the way to do it, just trying to make it work for a moment.
          # I should try to figure out
          # my ip
          CidrIp: 98.30.107.147/32
          # leaving it open for now, since i'm not leaving it up for long.
#          CidrIp: 0.0.0.0/0
#      Tags:
#        - Key: Name
#          Value: aws-cloud9-basic-env-95ee1794b3d14224ab40ab4de8ec5db6

########################################################################################################################

